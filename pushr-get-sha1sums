#!/usr/bin/python
import errno
import hashlib
import itertools
import optparse
import os
import sys
import urllib
import ConfigParser
from pushr import api, contentmatch

parser = optparse.OptionParser(usage="%prog")

CONFIG_PATH = os.path.expanduser('~/.pushr.conf')
cfg = ConfigParser.RawConfigParser()
try:
    f = file(CONFIG_PATH)
except IOError, e:
    parser.error('cannot open config file: %s' % e)
try:
    cfg.readfp(f)
finally:
    f.close()

try:
    api_key = cfg.get('flickr', 'api-key')
    username = cfg.get('flickr', 'username')
except (ConfigParser.NoSectionError,
        ConfigParser.NoOptionError), e:
    parser.error('config incomplete: %s' % e)

api = api.FlickrAPI(
    api_key=api_key,
    shared_secret=None,
    )
user = api.people_findByUsername(username)

update = contentmatch.ContentMatch(filename='images.flickr.sha1')

for page in itertools.count(1):
    photos = api.people_getPublicPhotos(
        user_id=user['id'],
        per_page=500,
        page=page,
        )
    if not photos:
        break
    for photo in photos['photo']:
        if update.isKnown(photo['id']):
            continue
        for size in api.photos_getSizes(photo_id=photo['id'])['size']:
            if size['label'] != 'Original':
                continue
            url = size['source']
            print >>sys.stderr, 'Fetching %s from %s' % (photo['id'], url)
            f = urllib.urlopen(url)
            s = hashlib.sha1()
            while True:
                data = f.read(32768)
                if not data:
                    break
                s.update(data)
            f.close()

            update.add(photo_id=photo['id'],
                       sha1sum=s.hexdigest())
            update.flush()

update.commit()
