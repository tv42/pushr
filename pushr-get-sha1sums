#!/usr/bin/python
import errno
import itertools
import optparse
import os
import sha
import sys
import urllib
import ConfigParser
import flickr
from pushr import contentmatch

parser = optparse.OptionParser(usage="%prog")

CONFIG_PATH = os.path.expanduser('~/.pushr.conf')
cfg = ConfigParser.RawConfigParser()
try:
    f = file(CONFIG_PATH)
except IOError, e:
    parser.error('cannot open config file: %s' % e)
try:
    cfg.readfp(f)
finally:
    f.close()

try:
    api_key = cfg.get('flickr', 'api-key')
    username = cfg.get('flickr', 'username')
except (ConfigParser.NoSectionError,
        ConfigParser.NoOptionError), e:
    parser.error('config incomplete: %s' % e)

flickr.API_KEY = api_key

user = flickr.people_findByUsername(username)

update = contentmatch.ContentMatch(filename='images.flickr.sha1')

for page in itertools.count(1):
    photos = flickr.people_getPublicPhotos(user_id=user.id,
                                           per_page=500,
                                           page=page)
    if not photos:
        break
    for photo in photos:
        if update.isKnown(photo.id):
            continue
        url = photo.getURL(size='Original',
                           urlType='source')
        print >>sys.stderr, 'Fetching %s from %s' % (photo.id, url)
        f = urllib.urlopen(url)
        s = sha.new()
        while True:
            data = f.read(32768)
            if not data:
                break
            s.update(data)
        f.close()

        update.add(photo_id=photo.id,
                   sha1sum=s.hexdigest())
        update.flush()

update.commit()
